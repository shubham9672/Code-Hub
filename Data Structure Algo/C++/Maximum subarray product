/*
Given an array that contains both positive and negative integers, find the product of the maximum product subarray. Expected Time complexity is O(n) and only O(1) extra space can be used.

Examples:

Input: arr[] = {6, -3, -10, 0, 2}
Output:   180  // The subarray is {6, -3, -10}

Input: arr[] = {-1, -3, -10, 0, 60}
Output:   60  // The subarray is {60}

Input: arr[] = {-2, -40, 0, -2, -3}
Output:   80  // The subarray is {-2, -40}
*/

#include <iostream>
#include <bits/stdc++.h>
using namespace std;

//function for finding maximum subbarray
int solve(vector<int>arr){
    int maxsum=1,minsum=1,ans=INT_MIN;
    for(int i=0;i<arr.size();i++){
        if(arr[i]<0)
        swap(maxsum,minsum);
        maxsum=max(arr[i],maxsum*arr[i]);
        minsum=min(arr[i],minsum*arr[i]);
        ans=max(ans,maxsum);
    }
    return maxsum;
}

int main() {
	int n;
	cin>>n;
	vector<int>arr(n);
	for(int i=0;i<n;i++)
	cin>>arr[i];
	cout<<solve(arr);
	return 0;
}
